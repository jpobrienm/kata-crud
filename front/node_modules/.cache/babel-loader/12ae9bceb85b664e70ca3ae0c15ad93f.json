{"ast":null,"code":"var _jsxFileName = \"C:\\\\Estudio-Sofka\\\\Codigos\\\\kata-crud-refactoring-master\\\\front\\\\src\\\\components\\\\Form.js\";\nimport React, { useContext, useRef, useState } from 'react';\nimport { Store } from './Store';\n\nconst Form = props => {\n  const HOST_API = props.HOST_API;\n  const formRef = useRef(null);\n  const {\n    dispatch,\n    state: {\n      todo\n    }\n  } = useContext(Store);\n  const item = todo.item;\n  const [state, setState] = useState(item);\n\n  const onAdd = event => {\n    event.preventDefault();\n\n    if (state.name === undefined || !/\\S/.test(state.name)) {\n      state.name = \"\";\n      return;\n    }\n\n    const request = {\n      name: state.name.trim(),\n      id: null,\n      completed: false\n    };\n    fetch(HOST_API, {\n      method: \"POST\",\n      body: JSON.stringify(request),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).then(todo => {\n      dispatch({\n        type: \"add-item\",\n        item: todo\n      });\n      setState({\n        name: \"\"\n      });\n      formRef.current.reset();\n    });\n  };\n\n  const onEdit = event => {\n    event.preventDefault();\n\n    if (state.name === undefined || !/\\S/.test(state.name)) {\n      state.name = undefined;\n      return;\n    }\n\n    const request = {\n      name: state.name.trim(),\n      id: item.id,\n      isCompleted: item.isCompleted\n    };\n    fetch(HOST_API + \"/todo\", {\n      method: \"PUT\",\n      body: JSON.stringify(request),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).then(todo => {\n      dispatch({\n        type: \"update-item\",\n        item: todo\n      });\n      setState({\n        name: \"\"\n      });\n      formRef.current.reset();\n    });\n  };\n\n  return React.createElement(\"form\", {\n    className: \"MyForm\",\n    ref: formRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    className: \"MyInput\",\n    type: \"text\",\n    name: \"name\",\n    placeholder: \"\\xBFQu\\xE9 piensas hacer hoy?\",\n    onChange: event => {\n      setState({ ...state,\n        name: event.target.value\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }), item.id && React.createElement(\"button\", {\n    className: \"MyButton\",\n    onClick: onEdit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, \"Actualizar\"), !item.id && React.createElement(\"button\", {\n    className: \"MyButton\",\n    onClick: onAdd,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, \"Crear\"));\n};\n\nexport default Form;","map":{"version":3,"sources":["C:/Estudio-Sofka/Codigos/kata-crud-refactoring-master/front/src/components/Form.js"],"names":["React","useContext","useRef","useState","Store","Form","props","HOST_API","formRef","dispatch","state","todo","item","setState","onAdd","event","preventDefault","name","undefined","test","request","trim","id","completed","fetch","method","body","JSON","stringify","headers","then","response","json","type","current","reset","onEdit","isCompleted","target","value"],"mappings":"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","sourcesContent":["import React, { useContext, useRef, useState} from 'react';\r\nimport { Store } from './Store';\r\n\r\nconst Form = (props) =>{\r\n    const HOST_API = props.HOST_API\r\n    const formRef = useRef(null);\r\n    const { dispatch, state: { todo } } = useContext(Store);\r\n    const item = todo.item;\r\n    const [state, setState] = useState(item);\r\n\r\n    const onAdd = (event) => {\r\n        event.preventDefault();\r\n\r\n        if(state.name === undefined || !/\\S/.test(state.name)){\r\n            state.name = \"\";\r\n            return;\r\n        }\r\n\r\n        const request = {\r\n            name: state.name.trim(),\r\n            id: null,\r\n            completed: false\r\n          };\r\n\r\n        fetch(HOST_API , {\r\n          method: \"POST\",\r\n          body: JSON.stringify(request),\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          }\r\n        })\r\n          .then(response => response.json())\r\n          .then((todo) => {\r\n            dispatch({ type: \"add-item\", item: todo });\r\n            setState({ name: \"\" });\r\n            formRef.current.reset();\r\n          });\r\n    }\r\n\r\n    const onEdit = (event) => {\r\n        event.preventDefault();\r\n\r\n        if(state.name === undefined || !/\\S/.test(state.name)){\r\n            state.name = undefined;\r\n            return;\r\n        }\r\n    \r\n        const request = {\r\n          name: state.name.trim(),\r\n          id: item.id,\r\n          isCompleted: item.isCompleted\r\n        };\r\n    \r\n    \r\n        fetch(HOST_API + \"/todo\", {\r\n          method: \"PUT\",\r\n          body: JSON.stringify(request),\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          }\r\n        })\r\n          .then(response => response.json())\r\n          .then((todo) => {\r\n            dispatch({ type: \"update-item\", item: todo });\r\n            setState({ name: \"\" });\r\n            formRef.current.reset();\r\n          });\r\n    }\r\n    \r\n    return(\r\n    <form className=\"MyForm\" ref={formRef}>\r\n        <input className = \"MyInput\"\r\n            type=\"text\"\r\n            name=\"name\"\r\n            placeholder=\"¿Qué piensas hacer hoy?\"\r\n            onChange={(event) => {\r\n                setState({ ...state, name: event.target.value })\r\n              }} ></input>\r\n        {item.id && <button className = \"MyButton\" onClick={onEdit}>Actualizar</button>}\r\n        {!item.id && <button className = \"MyButton\" onClick={onAdd}>Crear</button>}    \r\n    </form>);\r\n}\r\n\r\nexport default Form;"]},"metadata":{},"sourceType":"module"}