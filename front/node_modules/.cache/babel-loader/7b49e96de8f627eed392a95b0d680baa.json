{"ast":null,"code":"var _jsxFileName = \"C:\\\\Estudio-Sofka\\\\Codigos\\\\kata-crud-refactoring-master\\\\front\\\\src\\\\components\\\\List.js\";\nimport React, { useEffect, useContext } from 'react';\nimport { Store } from './Store';\n\nconst List = props => {\n  const HOST_API = props.HOST_API;\n  const {\n    dispatch,\n    state: {\n      todo\n    }\n  } = useContext(Store);\n  const currentList = todo.list;\n  useEffect(() => {\n    fetch(HOST_API + \"/todos\").then(response => response.json()).then(list => {\n      dispatch({\n        type: \"update-list\",\n        list\n      });\n    });\n  }, [dispatch]);\n\n  const onDelete = id => {\n    fetch(HOST_API + \"/\" + id + \"/todo\", {\n      method: \"DELETE\"\n    }).then(list => {\n      dispatch({\n        type: \"delete-item\",\n        id\n      });\n    });\n  };\n\n  const onEdit = todo => {\n    dispatch({\n      type: \"edit-item\",\n      item: todo\n    });\n  };\n\n  const onChange = (event, todo) => {\n    const request = {\n      name: todo.name,\n      id: todo.id,\n      completed: event.target.checked\n    };\n    fetch(HOST_API + \"/todo\", {\n      method: \"PUT\",\n      body: JSON.stringify(request),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).then(todo => {\n      dispatch({\n        type: \"update-item\",\n        item: todo\n      });\n    });\n  };\n\n  const decorationDone = {\n    textDecoration: 'line-through'\n  };\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(\"table\", {\n    className: \"MyTable\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    className: \"MyTd\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \"ID\"), React.createElement(\"td\", {\n    className: \"MyTodo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, \"Tarea\"), React.createElement(\"td\", {\n    className: \"MyCheck\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, \"\\xBFCompletado?\"))), React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, currentList.map(todo => {\n    return React.createElement(\"tr\", {\n      key: todo.id,\n      style: todo.completed ? decorationDone : {},\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, todo.id), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, todo.name), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"checkbox\",\n      defaultChecked: todo.completed,\n      onChange: event => onChange(event, todo),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    })), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"MyButton\",\n      onClick: () => onDelete(todo.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"Eliminar\")), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"MyButton\",\n      onClick: () => onEdit(todo),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"Editar\")));\n  }))));\n};\n\nexport default List;","map":{"version":3,"sources":["C:/Estudio-Sofka/Codigos/kata-crud-refactoring-master/front/src/components/List.js"],"names":["React","useEffect","useContext","Store","List","props","HOST_API","dispatch","state","todo","currentList","list","fetch","then","response","json","type","onDelete","id","method","onEdit","item","onChange","event","request","name","completed","target","checked","body","JSON","stringify","headers","decorationDone","textDecoration","map"],"mappings":"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","sourcesContent":["import React, {useEffect, useContext} from 'react';\r\nimport { Store } from './Store';\r\n\r\nconst List = (props) => {\r\n    const HOST_API = props.HOST_API;\r\n    const { dispatch, state: { todo } } = useContext(Store);\r\n    const currentList = todo.list;\r\n\r\n    useEffect(() => {\r\n      fetch(HOST_API + \"/todos\")\r\n        .then(response => response.json())\r\n        .then((list) => {\r\n          dispatch({ type: \"update-list\", list })\r\n        })\r\n    }, [dispatch]);\r\n\r\n    const onDelete = (id) => {\r\n      fetch(HOST_API + \"/\" + id + \"/todo\", {\r\n        method: \"DELETE\"\r\n      }).then((list) => {\r\n        dispatch({ type: \"delete-item\", id })\r\n      })\r\n    };\r\n  \r\n    const onEdit = (todo) => {\r\n      dispatch({ type: \"edit-item\", item: todo })\r\n    };\r\n  \r\n    const onChange = (event, todo) => {\r\n      const request = {\r\n        name: todo.name,\r\n        id: todo.id,\r\n        completed: event.target.checked\r\n      };\r\n      fetch(HOST_API + \"/todo\", {\r\n        method: \"PUT\",\r\n        body: JSON.stringify(request),\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      })\r\n        .then(response => response.json())\r\n        .then((todo) => {\r\n          dispatch({ type: \"update-item\", item: todo });\r\n        });\r\n    };\r\n  \r\n    const decorationDone = {\r\n      textDecoration: 'line-through'\r\n    };\r\n\r\n    return (<div>\r\n        <table className=\"MyTable\">\r\n          <thead>\r\n            <tr>\r\n              <td className=\"MyTd\">ID</td>\r\n              <td className=\"MyTodo\">Tarea</td>\r\n              <td className=\"MyCheck\">Â¿Completado?</td>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n          {currentList.map((todo) => {\r\n          return <tr key={todo.id} style={todo.completed ? decorationDone : {}}>\r\n            <td>{todo.id}</td>\r\n            <td>{todo.name}</td>\r\n            <td><input type=\"checkbox\" defaultChecked={todo.completed} onChange={(event) => onChange(event, todo)}></input></td>\r\n            <td><button className = \"MyButton\" onClick={() => onDelete(todo.id)}>Eliminar</button></td>\r\n            <td><button className = \"MyButton\" onClick={() => onEdit(todo)}>Editar</button></td>\r\n          </tr>\r\n        })}\r\n          </tbody>\r\n        </table>\r\n      </div>);\r\n}\r\n\r\nexport default List;"]},"metadata":{},"sourceType":"module"}